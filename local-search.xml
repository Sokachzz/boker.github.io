<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/boker.github.io/2022/04/03/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/boker.github.io/2022/04/03/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>此文记录了我第一次通过hexo框架搭建博客的一些心得，介绍了Hexo博客的搭建方法和一些使用方法，会持续在这里更新一些新学到的hexo使用方法</p><span id="more"></span><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>安装node.js,Git</p><p><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi">https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi</a></p><p><a href="https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe">https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe</a></p><ul><li><p>安装完成后，需要将git,node.js,npm都设置为环境变量，将三者的绝对路径复制到环境变量的设置中，具体操作可以百度</p></li><li><p>设置完环境变量可以通过命令行中进行如下的输入来判断是否安装成功以及安装的版本信息</p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br>git --<span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>​    在这里踩了很大的坑，一开始搜了很多教程，跟着网上的这些教程做的过程中报了很多错，可能与我git和node.js以前下载过，后来重新下载位置改变有关，在这里就卡了很久，后来发现在hexo的官方网站上有一些一键部署指令，很简洁并且一次就成功了。只需要在命令行中输入如下指令即可</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">npm install hexo-cli -g<br>## 初始化hexo基础配置文件<br>hexo init blog<br>## 初始化hexo，并且建立在blog文件夹中<br>cd blog<br>## 进入到blog文件夹中<br>npm install<br>## 配置node<br>hexo g<br>## 加载hexo基础html、css、js等文件<br>hexo server<br>## 开启本地服务器<br></code></pre></td></tr></table></figure><p>​    输入完最后一条指令之后，hexo会开启一个本地服务器，并且会给你一个本地服务器的url，将这个url复制到你的浏览器中，可以看到hexo默认配置的静态网页，这时你的博客就可以算是在本地搭建完啦</p><p><img src="/1.png" alt="1"></p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>​    在hexo官网中你可以找到很多博客主题，点击图片可以进行预览，点击标题就会进入下载界面，将下载下来的压缩包解压到</p>]]></content>
    
    
    <categories>
      
      <category>Hexo博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_function</title>
    <link href="/boker.github.io/2022/04/01/python_function/"/>
    <url>/boker.github.io/2022/04/01/python_function/</url>
    
    <content type="html"><![CDATA[<p>python库函数中与变量相关的方法以及python的一些小知识点</p><span id="more"></span><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="更改vscode输出位置"><a href="#更改vscode输出位置" class="headerlink" title="更改vscode输出位置"></a>更改vscode输出位置</h2><p>console属性是integratedTerminal时，会把结果输出到终端，是internalConsole时会输出到调试控制台。</p><h2 id="查询变量类型"><a href="#查询变量类型" class="headerlink" title="查询变量类型"></a>查询变量类型</h2><p>type() 函数可以用来查询变量所指的对象类型，此外还可以用 isinstance 来判断</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">isinstance</span>(a, <span class="hljs-built_in">int</span>)<br>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>isinstance 和 type 的区别在于：</p><p>　type()不会认为子类是一种父类类型。</p><p>　isinstance()会认为子类是一种父类类型。</p><p>　例如，bool为int的子类</p><h2 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h2><p>使用del语句删除一些对象引用,也可以删除数组的片段</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">del</span> car（删除对象）<br><span class="hljs-selector-tag">del</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2:4]</span>（删除数组的第三个到第五个元素）<br></code></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>1.Python中单行注释以 # 开头,多行注释可以用多个 # 号，还有 ‘’’ 和 “””</p><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句，在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 </p><p>空行</p><p>1.函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>2.空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>1.Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割</p><p>多个语句构成代码组</p><p>1.缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>2.像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>3.我们将首行及后面的代码组称为一个子句(clause)。</p><h2 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h2><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</p><h2 id="import-from…import"><a href="#import-from…import" class="headerlink" title="import,from…import"></a>import,from…import</h2><p>1.在 python 用 import 或者 from…import 来导入相应的模块。</p><p>2.将整个模块(somemodule)导入，格式为： import somemodule</p><p>3.从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>4.从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>5.将某个模块中的全部函数导入，格式为： from somemodule import *</p><h2 id="字符串相关方法"><a href="#字符串相关方法" class="headerlink" title="字符串相关方法"></a>字符串相关方法</h2><p>str1 = ‘hello, world!’</p><h3 id="1-计算字符串的长度"><a href="#1-计算字符串的长度" class="headerlink" title="1.计算字符串的长度"></a>1.计算字符串的长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(str1)) <span class="hljs-comment"># 13</span><br></code></pre></td></tr></table></figure><h3 id="2-获得字符串首字母大写"><a href="#2-获得字符串首字母大写" class="headerlink" title="2.获得字符串首字母大写"></a>2.获得字符串首字母大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.capitalize()) <span class="hljs-comment"># Hello, world!</span><br></code></pre></td></tr></table></figure><h3 id="3-获得字符串每个单词首字母大写"><a href="#3-获得字符串每个单词首字母大写" class="headerlink" title="3.获得字符串每个单词首字母大写"></a>3.获得字符串每个单词首字母大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.title()) <span class="hljs-comment"># Hello, World!</span><br></code></pre></td></tr></table></figure><h3 id="4-字符串全部大写"><a href="#4-字符串全部大写" class="headerlink" title="4.字符串全部大写"></a>4.字符串全部大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.upper()) <span class="hljs-comment"># HELLO, WORLD!</span><br></code></pre></td></tr></table></figure><h3 id="5-查找子串所在位置"><a href="#5-查找子串所在位置" class="headerlink" title="5.查找子串所在位置"></a>5.查找子串所在位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查找失败返回-1</span><br><span class="hljs-built_in">print</span>(str1.find(<span class="hljs-string">&#x27;or&#x27;</span>)) <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(str1.find(<span class="hljs-string">&#x27;shit&#x27;</span>)) <span class="hljs-comment"># -1</span><br><span class="hljs-comment"># 与find类似但找不到子串时会引发异常</span><br><span class="hljs-built_in">print</span>(str1.index(<span class="hljs-string">&#x27;or&#x27;</span>))<br><span class="hljs-built_in">print</span>(str1.index(<span class="hljs-string">&#x27;shit&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="6-检查字符串是否以指定的字符串开头"><a href="#6-检查字符串是否以指定的字符串开头" class="headerlink" title="6.检查字符串是否以指定的字符串开头"></a>6.检查字符串是否以指定的字符串开头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.startswith(<span class="hljs-string">&#x27;He&#x27;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(str1.startswith(<span class="hljs-string">&#x27;hel&#x27;</span>)) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="7-检查字符串是否以指定的字符串结尾"><a href="#7-检查字符串是否以指定的字符串结尾" class="headerlink" title="7.检查字符串是否以指定的字符串结尾"></a>7.检查字符串是否以指定的字符串结尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.endswith(<span class="hljs-string">&#x27;!&#x27;</span>)) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="8-将字符串以指定的宽度居中并在两侧填充指定的字符"><a href="#8-将字符串以指定的宽度居中并在两侧填充指定的字符" class="headerlink" title="8.将字符串以指定的宽度居中并在两侧填充指定的字符"></a>8.将字符串以指定的宽度居中并在两侧填充指定的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.center(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;*&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="9-将字符串以指定的宽度靠右放置左侧填充指定的字符"><a href="#9-将字符串以指定的宽度靠右放置左侧填充指定的字符" class="headerlink" title="9.将字符串以指定的宽度靠右放置左侧填充指定的字符"></a>9.将字符串以指定的宽度靠右放置左侧填充指定的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.rjust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27; &#x27;</span>))<br></code></pre></td></tr></table></figure><p>str2 = ‘abc123456’</p><h3 id="10-检查字符串是否由数字构成"><a href="#10-检查字符串是否由数字构成" class="headerlink" title="10.检查字符串是否由数字构成"></a>10.检查字符串是否由数字构成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str2.isdigit())  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="11-检查字符串是否以字母构成"><a href="#11-检查字符串是否以字母构成" class="headerlink" title="11.检查字符串是否以字母构成"></a>11.检查字符串是否以字母构成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str2.isalpha())  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="12-检查字符串是否以数字和字母构成"><a href="#12-检查字符串是否以数字和字母构成" class="headerlink" title="12.检查字符串是否以数字和字母构成"></a>12.检查字符串是否以数字和字母构成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str2.isalnum())  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="13-获得字符串修剪左右两侧空格之后的拷贝"><a href="#13-获得字符串修剪左右两侧空格之后的拷贝" class="headerlink" title="13.获得字符串修剪左右两侧空格之后的拷贝"></a>13.获得字符串修剪左右两侧空格之后的拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str3 = <span class="hljs-string">&#x27;  jackfrued@126.com &#x27;</span><br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-built_in">print</span>(str3.strip())<br><span class="hljs-comment">#strip,lstrip,rstrip#删除两侧，删除左侧，删除右侧</span><br></code></pre></td></tr></table></figure><h3 id="14-在字符串中使用变量"><a href="#14-在字符串中使用变量" class="headerlink" title="14.在字符串中使用变量"></a>14.在字符串中使用变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;方法一：f字符串&#x27;&#x27;&#x27;</span><br>first_name=<span class="hljs-string">&quot;ada&quot;</span><br>last_name=<span class="hljs-string">&quot;lovelace&quot;</span><br>full_name=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name&#125;</span><span class="hljs-subst">&#123;lastname&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(full_name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello,<span class="hljs-subst">&#123;full_name&#125;</span>&quot;</span>)<span class="hljs-comment">#ada lovelace</span><br><span class="hljs-string">&#x27;&#x27;&#x27;方法二：format方法&#x27;&#x27;&#x27;</span><br>full_name=<span class="hljs-string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>&#123;first_name,last_name&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br></code></pre></td></tr></table></figure><h2 id="列表相关方法"><a href="#列表相关方法" class="headerlink" title="列表相关方法"></a>列表相关方法</h2><p>list1 = [1, 3, 5, 7, 100]</p><h3 id="1-计算列表长度"><a href="#1-计算列表长度" class="headerlink" title="1.计算列表长度"></a>1.计算列表长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(list1) <span class="hljs-comment"># 5</span><br></code></pre></td></tr></table></figure><h3 id="2-在列表末尾添加元素"><a href="#2-在列表末尾添加元素" class="headerlink" title="2.在列表末尾添加元素"></a>2.在列表末尾添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.append(<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><h3 id="3-在对应下标处添加元素"><a href="#3-在对应下标处添加元素" class="headerlink" title="3.在对应下标处添加元素"></a>3.在对应下标处添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-comment"># list1[1]=400</span><br></code></pre></td></tr></table></figure><h3 id="4-合并两个列表"><a href="#4-合并两个列表" class="headerlink" title="4.合并两个列表"></a>4.合并两个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.extend([<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>])<br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br><span class="hljs-comment">#二者等效，都是将两个列表合并，添加的元素放在列表的末尾</span><br></code></pre></td></tr></table></figure><h3 id="5-删除列表中的元素"><a href="#5-删除列表中的元素" class="headerlink" title="5.删除列表中的元素"></a>5.删除列表中的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;判断元素是否存在存在则删除该元素&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>    list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#[1, 5, 7, 100]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;从指定的位置删除元素&#x27;&#x27;&#x27;</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><span class="hljs-comment">#[3, 5, 7]</span><br></code></pre></td></tr></table></figure><h3 id="6-清空列表"><a href="#6-清空列表" class="headerlink" title="6.清空列表"></a>6.清空列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.clear() <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><h3 id="7-对列表排序"><a href="#7-对列表排序" class="headerlink" title="7.对列表排序"></a>7.对列表排序</h3><p>list1 = [‘orange’, ‘apple’, ‘zoo’, ‘internationalization’, ‘blueberry’]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;sorted函数排序后不会对原列表产生影响，list1中的顺序不变&#x27;&#x27;&#x27;</span><br>list2 = <span class="hljs-built_in">sorted</span>(list1)<br><span class="hljs-comment">#按字母表顺序对列表排序</span><br>list3 = <span class="hljs-built_in">sorted</span>(list1, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#字母表逆序对列表排序</span><br>list4 = <span class="hljs-built_in">sorted</span>(list1, key=<span class="hljs-built_in">len</span>)<br><span class="hljs-comment">#通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;sort函数会直接在列表对象上进行排序&#x27;&#x27;&#x27;</span><br>list1.sort(reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="集合相关方法"><a href="#集合相关方法" class="headerlink" title="集合相关方法"></a>集合相关方法</h2><h3 id="1-向集合中添加元素"><a href="#1-向集合中添加元素" class="headerlink" title="1.向集合中添加元素"></a>1.向集合中添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br>set1.add(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(set1)<br><span class="hljs-comment">#&#123;1,2,3,4&#125;</span><br>set1.update([<span class="hljs-number">12</span>,<span class="hljs-number">13</span>])<br><span class="hljs-comment">#&#123;1,2,3,4,12,13&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-从集合中删除元素"><a href="#2-从集合中删除元素" class="headerlink" title="2.从集合中删除元素"></a>2.从集合中删除元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">set1.remove(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#&#123;1,2,3,12,13&#125;</span><br><span class="hljs-comment">#删除指定位置上的元素</span><br>set1.pop()<br><span class="hljs-comment">#&#123;2,3,4,12,13&#125;</span><br><span class="hljs-comment">#删除第一个元素</span><br></code></pre></td></tr></table></figure><h2 id="字典相关方法"><a href="#字典相关方法" class="headerlink" title="字典相关方法"></a>字典相关方法</h2><h3 id="1-删除字典中的元素"><a href="#1-删除字典中的元素" class="headerlink" title="1.删除字典中的元素"></a>1.删除字典中的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;骆昊&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;狄仁杰&#x27;</span>: <span class="hljs-number">82</span>&#125;<br><span class="hljs-built_in">print</span>(scores.pop(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">100</span>))<span class="hljs-comment">#95</span><br><span class="hljs-comment">#删除对应的键值对</span><br><span class="hljs-built_in">print</span>(scores.popitem())<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-comment">#(&#x27;狄仁杰&#x27;, 82)</span><br><span class="hljs-comment">#&#123;&#x27;骆昊&#x27;: 95, &#x27;白元芳&#x27;: 78&#125;</span><br><span class="hljs-comment">#删除最后一对键值对</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
