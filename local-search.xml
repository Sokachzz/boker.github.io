<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python_3</title>
    <link href="/boker.github.io/2022/04/03/python-3/"/>
    <url>/boker.github.io/2022/04/03/python-3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python_2</title>
    <link href="/boker.github.io/2022/04/03/python-2/"/>
    <url>/boker.github.io/2022/04/03/python-2/</url>
    
    <content type="html"><![CDATA[<p>python函数相关内容</p><span id="more"></span><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>（参数列表）:<br>    函数体<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>在 python 中，类型属于对象，变量是没有类型的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a=<span class="hljs-string">&quot;Runoob&quot;</span><br></code></pre></td></tr></table></figure><p>以上代码中，**[1,2,3]** 是 List 类型，**”Runoob”** 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p><h3 id="可更改-mutable-与不可更改-immutable-对象"><a href="#可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="可更改(mutable)与不可更改(immutable)对象"></a>可更改(mutable)与不可更改(immutable)对象</h3><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li><li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>python 函数的参数传递：</p><ul><li><strong>不可变类型：</strong>类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li><li><strong>可变类型：</strong>类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))  <span class="hljs-comment"># 指向的是同一个对象</span><br>    a = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))  <span class="hljs-comment"># 一个新对象</span><br><br>a = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br>change(a)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1706410993968</span><br><span class="hljs-string">1706410993968</span><br><span class="hljs-string">1706410994256</span><br><span class="hljs-string">1</span><br><span class="hljs-string">1706410993968</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">对于不可变类型（对象）<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">变量仅仅是对一个对象的引用，可以类似的看作是一个指针，</span><br><span class="hljs-string">它可以指向不同的对象，更改变量只是让这个指针指向不同的对象，并且不同的对象有不同的地址</span><br><span class="hljs-string">可以看到，传递参数时，传递的只是a的值，并且在函数外部，该变量的值不会因为函数内部而改变</span><br><span class="hljs-string">由于没有影响到这个对象本身，即此时还指向的是同一个对象，</span><br><span class="hljs-string">所以他们对应的是同一个地址，此时修改a的值，则会生成一个新的对象被指向</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>对于可变类型（对象）<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">在函数内部改变变量会影响到函数外部的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>以下是调用函数时可使用的正式参数类型：</p><ul><li>必需参数</li><li>关键字参数</li><li>默认参数</li><li>不定长参数</li></ul><h3 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h3><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"> <span class="hljs-built_in">str</span> </span>):<br>   <span class="hljs-string">&#x27;&#x27;&#x27;打印任何传入的字符串&#x27;&#x27;&#x27;</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment"># 调用 printme 函数，不加参数会报错</span><br>printme(<span class="hljs-string">&quot;im good&quot;</span>)<br>printme()<br></code></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> name, age </span>):<br>   <span class="hljs-string">&quot;打印任何传入的字符串&quot;</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;名字: &quot;</span>, name)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;年龄: &quot;</span>, age)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment">#调用printinfo函数</span><br>printinfo( age=<span class="hljs-number">50</span>, name=<span class="hljs-string">&quot;runoob&quot;</span> )<br></code></pre></td></tr></table></figure><p>可以看到这里并不需要参数调用顺序与参数声明顺序一致</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> name, age = <span class="hljs-number">35</span> </span>):<br>   <span class="hljs-string">&quot;打印任何传入的字符串&quot;</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;名字: &quot;</span>, name)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;年龄: &quot;</span>, age)<br>   <span class="hljs-keyword">return</span><br><br>printinfo( name=<span class="hljs-string">&quot;runoob&quot;</span> )<br></code></pre></td></tr></table></figure><p>此时函数中默认其参数为age=35</p><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：</p><p>第一个参数为普通的参数，第二个参数为不定长参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params">[formal_args,] *var_args_tuple </span>):<br>   <span class="hljs-string">&quot;函数_文档字符串&quot;</span><br>   function_suite<br>   <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> arg1, *vartuple </span>):<br>    <span class="hljs-string">&quot;打印任何传入的参数&quot;</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;输出: &quot;</span>)<br>    <span class="hljs-built_in">print</span> (arg1)<br>    <span class="hljs-built_in">print</span> (vartuple)<br>    <span class="hljs-comment"># 调用printinfo函数</span><br>    printinfo( <span class="hljs-number">70</span>, <span class="hljs-number">60</span>, <span class="hljs-number">50</span> )<br></code></pre></td></tr></table></figure><p>加了星号 ***** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数，默认将后几个参数存放到一个元组里面。不定长参数可以不传入</p><p>还有一种就是参数带两个星号 ******基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params">[formal_args,] **var_args_dict </span>):<br>    <span class="hljs-string">&quot;函数_文档字符串&quot;</span><br>    function_suite<br>    <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> arg1, **vardict </span>):<br>    <span class="hljs-string">&quot;打印任何传入的参数&quot;</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;输出: &quot;</span>)<br>    <span class="hljs-built_in">print</span> (arg1)<br>    <span class="hljs-built_in">print</span> (vardict)<br>    <span class="hljs-comment"># 调用printinfo</span><br>    函数printinfo(<span class="hljs-number">1</span>, a=<span class="hljs-number">2</span>,b=<span class="hljs-number">3</span>)<br>    <span class="hljs-string">&#x27;&#x27;&#x27;输出: 1&#123;&#x27;a&#x27;: 2, &#x27;b&#x27;: 3&#125;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>声明函数时，参数中星号 ***** 可以单独出现，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a,b,*,c</span>):<br>    <span class="hljs-keyword">return</span> a+b+c<br></code></pre></td></tr></table></figure><p>如果单独出现星号 ***** 后的参数必须用关键字传入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="解决不同模块命名重复的方法"><a href="#解决不同模块命名重复的方法" class="headerlink" title="解决不同模块命名重复的方法"></a>解决不同模块命名重复的方法</h2><h3 id="1-用as取别名"><a href="#1-用as取别名" class="headerlink" title="1.用as取别名"></a>1.用as取别名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> untils.foo <span class="hljs-keyword">import</span> say_hello <span class="hljs-keyword">as</span> s1<br><span class="hljs-keyword">from</span> untils.bar <span class="hljs-keyword">import</span> say_hello <span class="hljs-keyword">as</span> s2<br></code></pre></td></tr></table></figure><h3 id="2-使用完全限定名"><a href="#2-使用完全限定名" class="headerlink" title="2.使用完全限定名"></a>2.使用完全限定名</h3><p>包名.模块名.函数名（包名可以省略）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> untils <span class="hljs-keyword">import</span> foo<br><span class="hljs-keyword">from</span> untils <span class="hljs-keyword">import</span> barfoo.say_hello()<br>bar.say_hello()<br>untils.foo.say_hello()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_1</title>
    <link href="/boker.github.io/2022/04/03/python-1/"/>
    <url>/boker.github.io/2022/04/03/python-1/</url>
    
    <content type="html"><![CDATA[<p>python分支结构、循环结构、语言元素</p><span id="more"></span><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">score = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入成绩: &#x27;</span>))<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    grade = <span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    grade = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span>:<br>    grade = <span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span>:<br>    grade = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    grade = <span class="hljs-string">&#x27;E&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是:&#x27;</span>, grade)<br></code></pre></td></tr></table></figure><p>每一个分支要有冒号，分支通过相同的缩进区别</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h4><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">sum</span> += x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><h3 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h3><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>and</code>、<code>or</code>和<code>not</code></p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p><code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code></p><h4 id="整除符号"><a href="#整除符号" class="headerlink" title="整除符号"></a>整除符号</h4><p>//</p><h4 id="输入输出的一些方法"><a href="#输入输出的一些方法" class="headerlink" title="输入输出的一些方法"></a>输入输出的一些方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用input()函数获取键盘输入(字符串)</span><br><span class="hljs-string">使用int()函数将输入的字符串转换成整数</span><br><span class="hljs-string">使用print()函数输出带占位符的字符串</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;a = &#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;f:<span class="hljs-number">.1</span>f&#125;</span>华氏度 = <span class="hljs-subst">&#123;c:<span class="hljs-number">.1</span>f&#125;</span>摄氏度&#x27;</span>)<br></code></pre></td></tr></table></figure><p>由于print函数会自动打出换行，所以如果不需要换行，在输出后多打一个end=’’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">row = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入行数: &#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/boker.github.io/2022/04/03/1/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/boker.github.io/2022/04/03/1/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>此文记录了我第一次通过hexo框架搭建博客的一些心得，介绍了Hexo博客的搭建方法和一些使用方法，会持续在这里更新一些新学到的hexo使用方法。</p><span id="more"></span><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>安装node.js,Git</p><p><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi">https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi</a></p><p><a href="https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe">https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe</a></p><ul><li><p>安装完成后，需要将git,node.js,npm都设置为环境变量，将三者的绝对路径复制到环境变量的设置中，具体操作可以百度。</p></li><li><p>设置完环境变量可以通过命令行中进行如下的输入来判断是否安装成功以及安装的版本信息。</p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br>git --<span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>​    在这里踩了很大的坑，一开始搜了很多教程，跟着网上的这些教程做的过程中报了很多错，可能与我git和node.js以前下载过，后来重新下载位置改变有关，在这里就卡了很久，后来发现在hexo的官方网站上有一些一键部署指令，很简洁并且一次就成功了。只需要在命令行中输入如下指令即可。</p><ul><li><p>初始化hexo基础配置文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure></li><li><p>初始化hexo，并且建立在blog文件夹中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure></li><li><p>进入到blog文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure></li><li><p>配置node</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li><p>加载hexo基础html、css、js等文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span>  <span class="hljs-comment">//hexo g</span><br></code></pre></td></tr></table></figure></li><li><p>开启本地服务器</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure></li></ul><p>​    输入完最后一条指令之后，hexo会开启一个本地服务器，并且会给你一个本地服务器的url，将这个url复制到你的浏览器中，可以看到hexo默认配置的静态网页，这时你的博客就可以算是在本地搭建完啦。</p><h3 id="hexo文件"><a href="#hexo文件" class="headerlink" title="hexo文件"></a>hexo文件</h3><p><img src="1.png" alt="1"></p><p>主要会用到以下三个文件</p><ul><li>config.yml<ul><li>用于修改网站配置，配置设定，网站的标题，网址等。</li><li>可以搜索官方文档具体使用。</li></ul></li><li>source 资源<ul><li>用于存放原始资源的地方，自己上传的图片，markdown文章等。</li><li>其中_posts文件夹中存放的是那些要上传到网站上的资源。</li></ul></li><li>themes 主题<ul><li>用来存放主题的文件夹。</li><li>会根据主题解析source文件夹中的档案来生成静态页面。预设主题为landscape。</li></ul></li></ul><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>​    在hexo官网中你可以找到很多博客主题，我选择的是fluid主题。点击图片可以进行预览，点击标题就会进入下载界面，将下载下来的压缩包解压到先前提到的themes主题文件夹中，一般下载的主题都会有专门的用户文档描述使用方法，可以在主题存放的github仓库的readme 文档中找到，解压下来的文件夹需要重命名为主题名。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>设置主题是在hexo根目录下的config.yml文件中，修改themes属性。例如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid<br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>​    你可以自主修改主题中的很多配置，在主题对应的用户文档中都会有详细的使用说明，修改主题主要是在你主题文件夹下的config.yml文件里。需要注意的是，该config.yml文件与根目录中的config.yml文件是不同的，这个文件是用来配置主题相关属性的，对于二者重叠的属性修改，主题文件夹下的config.yml具有更高的优先级。</p><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><h4 id="建立GitHub仓库"><a href="#建立GitHub仓库" class="headerlink" title="建立GitHub仓库"></a>建立GitHub仓库</h4><p>Step1.注册GitHub账号并登录</p><ul><li>需要注意的是，GitHub作为国外网站，在国内登录时会出现加载很慢或者直接无法进入网站的情况。</li><li>我是通过挂梯子解决这个问题的，网上可以搜到一些教程修改本地设置也可以成功登录，我试过没成功，就再没试过了。</li></ul><p>Step2.点击New新建一个github仓库</p><p><img src="2.png" alt="2"></p><p>step3.进入到你的github仓库中，点击settings-&gt;pages，在Source里将branch设置为main，然后点击save，可以看到上方的绿色框中会生成一个url网址，这就是你未来的博客网址了。</p><p><img src="3.png" alt="3"></p><h4 id="将内容上传到GitHub"><a href="#将内容上传到GitHub" class="headerlink" title="将内容上传到GitHub"></a>将内容上传到GitHub</h4><p>Step1.安装Git相关套件</p><p>这一步需要回到hexo根目录中，在终端命令行中输入以下命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>Step2.修改_config.yml文件的deployment设置</p><p>需要主要的是这里的_config.yml指的是根目录中的文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:username/username.github.io.git<br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure><p>​    这一步可以说是我踩过最大的坑了，这里的repository使用的url应当是ssh形式的，如下图所示，并且，这里的url不能直接复制，使用github的ssh需要本地有对应的ssh密钥，应当先设置一个自己的ssh密钥，然后才能上传自己的内容到github中。</p><p><img src="4.png" alt="4"></p><ul><li><p>github的ssh密钥的设置</p><ul><li><p>在命令行中输入如下指令，会在你的电脑本地生成一个rsa文件，这个rsa文件用于生成自己的ssh密钥.</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>你只需要把里面的邮箱地址换成你自己的邮箱地址即可.</p></li><li><p>然后共有三次输入，第一次为你rsa文件的名字，二三次是密码的设置.</p></li><li><p>然后在C-user-.ssh文件夹中，可以找到一个rea.pub文件,打开文件复制里面的内容.</p></li><li><p>右上角点击头像-&gt;settings-&gt;SSH and GPG key-&gt;new key生成一个自己的ssh密钥.</p><p><img src="5.png" alt="5"></p></li></ul></li></ul><p>Step3.输入部署指令</p><p>这三条指令在你每次修改完博客要重新上传文件时，都需要使用。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean  <span class="hljs-comment">//hexo cl</span><br>hexo <span class="hljs-keyword">generate</span>  <span class="hljs-comment">// hexo g</span><br>hexo deploy  <span class="hljs-comment">// hexo d</span><br></code></pre></td></tr></table></figure><p>这样,你的hexo博客部署就已经完成啦,将github仓库中生成的你的url输入浏览器中,你就可以看到自己的博客啦!</p>]]></content>
    
    
    <categories>
      
      <category>Hexo博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_function</title>
    <link href="/boker.github.io/2022/04/01/python_function/"/>
    <url>/boker.github.io/2022/04/01/python_function/</url>
    
    <content type="html"><![CDATA[<p>python库函数中与变量相关的方法以及python的一些小知识点</p><span id="more"></span><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="更改vscode输出位置"><a href="#更改vscode输出位置" class="headerlink" title="更改vscode输出位置"></a>更改vscode输出位置</h2><p>console属性是integratedTerminal时，会把结果输出到终端，是internalConsole时会输出到调试控制台。</p><h2 id="查询变量类型"><a href="#查询变量类型" class="headerlink" title="查询变量类型"></a>查询变量类型</h2><p>type() 函数可以用来查询变量所指的对象类型，此外还可以用 isinstance 来判断</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">isinstance</span>(a, <span class="hljs-built_in">int</span>)<br>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>isinstance 和 type 的区别在于：</p><p>　type()不会认为子类是一种父类类型。</p><p>　isinstance()会认为子类是一种父类类型。</p><p>　例如，bool为int的子类</p><h2 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h2><p>使用del语句删除一些对象引用,也可以删除数组的片段</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">del</span> car（删除对象）<br><span class="hljs-selector-tag">del</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2:4]</span>（删除数组的第三个到第五个元素）<br></code></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>1.Python中单行注释以 # 开头,多行注释可以用多个 # 号，还有 ‘’’ 和 “””</p><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句，在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 </p><p>空行</p><p>1.函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>2.空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>1.Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割</p><p>多个语句构成代码组</p><p>1.缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>2.像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>3.我们将首行及后面的代码组称为一个子句(clause)。</p><h2 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h2><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</p><h2 id="import-from…import"><a href="#import-from…import" class="headerlink" title="import,from…import"></a>import,from…import</h2><p>1.在 python 用 import 或者 from…import 来导入相应的模块。</p><p>2.将整个模块(somemodule)导入，格式为： import somemodule</p><p>3.从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>4.从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>5.将某个模块中的全部函数导入，格式为： from somemodule import *</p><h2 id="字符串相关方法"><a href="#字符串相关方法" class="headerlink" title="字符串相关方法"></a>字符串相关方法</h2><p>str1 = ‘hello, world!’</p><h3 id="1-计算字符串的长度"><a href="#1-计算字符串的长度" class="headerlink" title="1.计算字符串的长度"></a>1.计算字符串的长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(str1)) <span class="hljs-comment"># 13</span><br></code></pre></td></tr></table></figure><h3 id="2-获得字符串首字母大写"><a href="#2-获得字符串首字母大写" class="headerlink" title="2.获得字符串首字母大写"></a>2.获得字符串首字母大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.capitalize()) <span class="hljs-comment"># Hello, world!</span><br></code></pre></td></tr></table></figure><h3 id="3-获得字符串每个单词首字母大写"><a href="#3-获得字符串每个单词首字母大写" class="headerlink" title="3.获得字符串每个单词首字母大写"></a>3.获得字符串每个单词首字母大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.title()) <span class="hljs-comment"># Hello, World!</span><br></code></pre></td></tr></table></figure><h3 id="4-字符串全部大写"><a href="#4-字符串全部大写" class="headerlink" title="4.字符串全部大写"></a>4.字符串全部大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.upper()) <span class="hljs-comment"># HELLO, WORLD!</span><br></code></pre></td></tr></table></figure><h3 id="5-查找子串所在位置"><a href="#5-查找子串所在位置" class="headerlink" title="5.查找子串所在位置"></a>5.查找子串所在位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查找失败返回-1</span><br><span class="hljs-built_in">print</span>(str1.find(<span class="hljs-string">&#x27;or&#x27;</span>)) <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(str1.find(<span class="hljs-string">&#x27;shit&#x27;</span>)) <span class="hljs-comment"># -1</span><br><span class="hljs-comment"># 与find类似但找不到子串时会引发异常</span><br><span class="hljs-built_in">print</span>(str1.index(<span class="hljs-string">&#x27;or&#x27;</span>))<br><span class="hljs-built_in">print</span>(str1.index(<span class="hljs-string">&#x27;shit&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="6-检查字符串是否以指定的字符串开头"><a href="#6-检查字符串是否以指定的字符串开头" class="headerlink" title="6.检查字符串是否以指定的字符串开头"></a>6.检查字符串是否以指定的字符串开头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.startswith(<span class="hljs-string">&#x27;He&#x27;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(str1.startswith(<span class="hljs-string">&#x27;hel&#x27;</span>)) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="7-检查字符串是否以指定的字符串结尾"><a href="#7-检查字符串是否以指定的字符串结尾" class="headerlink" title="7.检查字符串是否以指定的字符串结尾"></a>7.检查字符串是否以指定的字符串结尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.endswith(<span class="hljs-string">&#x27;!&#x27;</span>)) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="8-将字符串以指定的宽度居中并在两侧填充指定的字符"><a href="#8-将字符串以指定的宽度居中并在两侧填充指定的字符" class="headerlink" title="8.将字符串以指定的宽度居中并在两侧填充指定的字符"></a>8.将字符串以指定的宽度居中并在两侧填充指定的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.center(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;*&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="9-将字符串以指定的宽度靠右放置左侧填充指定的字符"><a href="#9-将字符串以指定的宽度靠右放置左侧填充指定的字符" class="headerlink" title="9.将字符串以指定的宽度靠右放置左侧填充指定的字符"></a>9.将字符串以指定的宽度靠右放置左侧填充指定的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str1.rjust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27; &#x27;</span>))<br></code></pre></td></tr></table></figure><p>str2 = ‘abc123456’</p><h3 id="10-检查字符串是否由数字构成"><a href="#10-检查字符串是否由数字构成" class="headerlink" title="10.检查字符串是否由数字构成"></a>10.检查字符串是否由数字构成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str2.isdigit())  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="11-检查字符串是否以字母构成"><a href="#11-检查字符串是否以字母构成" class="headerlink" title="11.检查字符串是否以字母构成"></a>11.检查字符串是否以字母构成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str2.isalpha())  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="12-检查字符串是否以数字和字母构成"><a href="#12-检查字符串是否以数字和字母构成" class="headerlink" title="12.检查字符串是否以数字和字母构成"></a>12.检查字符串是否以数字和字母构成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(str2.isalnum())  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="13-获得字符串修剪左右两侧空格之后的拷贝"><a href="#13-获得字符串修剪左右两侧空格之后的拷贝" class="headerlink" title="13.获得字符串修剪左右两侧空格之后的拷贝"></a>13.获得字符串修剪左右两侧空格之后的拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str3 = <span class="hljs-string">&#x27;  jackfrued@126.com &#x27;</span><br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-built_in">print</span>(str3.strip())<br><span class="hljs-comment">#strip,lstrip,rstrip#删除两侧，删除左侧，删除右侧</span><br></code></pre></td></tr></table></figure><h3 id="14-在字符串中使用变量"><a href="#14-在字符串中使用变量" class="headerlink" title="14.在字符串中使用变量"></a>14.在字符串中使用变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;方法一：f字符串&#x27;&#x27;&#x27;</span><br>first_name=<span class="hljs-string">&quot;ada&quot;</span><br>last_name=<span class="hljs-string">&quot;lovelace&quot;</span><br>full_name=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name&#125;</span><span class="hljs-subst">&#123;lastname&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(full_name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello,<span class="hljs-subst">&#123;full_name&#125;</span>&quot;</span>)<span class="hljs-comment">#ada lovelace</span><br><span class="hljs-string">&#x27;&#x27;&#x27;方法二：format方法&#x27;&#x27;&#x27;</span><br>full_name=<span class="hljs-string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>&#123;first_name,last_name&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br></code></pre></td></tr></table></figure><h2 id="列表相关方法"><a href="#列表相关方法" class="headerlink" title="列表相关方法"></a>列表相关方法</h2><p>list1 = [1, 3, 5, 7, 100]</p><h3 id="1-计算列表长度"><a href="#1-计算列表长度" class="headerlink" title="1.计算列表长度"></a>1.计算列表长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(list1) <span class="hljs-comment"># 5</span><br></code></pre></td></tr></table></figure><h3 id="2-在列表末尾添加元素"><a href="#2-在列表末尾添加元素" class="headerlink" title="2.在列表末尾添加元素"></a>2.在列表末尾添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.append(<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><h3 id="3-在对应下标处添加元素"><a href="#3-在对应下标处添加元素" class="headerlink" title="3.在对应下标处添加元素"></a>3.在对应下标处添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-comment"># list1[1]=400</span><br></code></pre></td></tr></table></figure><h3 id="4-合并两个列表"><a href="#4-合并两个列表" class="headerlink" title="4.合并两个列表"></a>4.合并两个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.extend([<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>])<br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br><span class="hljs-comment">#二者等效，都是将两个列表合并，添加的元素放在列表的末尾</span><br></code></pre></td></tr></table></figure><h3 id="5-删除列表中的元素"><a href="#5-删除列表中的元素" class="headerlink" title="5.删除列表中的元素"></a>5.删除列表中的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;判断元素是否存在存在则删除该元素&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>    list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#[1, 5, 7, 100]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;从指定的位置删除元素&#x27;&#x27;&#x27;</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><span class="hljs-comment">#[3, 5, 7]</span><br></code></pre></td></tr></table></figure><h3 id="6-清空列表"><a href="#6-清空列表" class="headerlink" title="6.清空列表"></a>6.清空列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1.clear() <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><h3 id="7-对列表排序"><a href="#7-对列表排序" class="headerlink" title="7.对列表排序"></a>7.对列表排序</h3><p>list1 = [‘orange’, ‘apple’, ‘zoo’, ‘internationalization’, ‘blueberry’]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;sorted函数排序后不会对原列表产生影响，list1中的顺序不变&#x27;&#x27;&#x27;</span><br>list2 = <span class="hljs-built_in">sorted</span>(list1)<br><span class="hljs-comment">#按字母表顺序对列表排序</span><br>list3 = <span class="hljs-built_in">sorted</span>(list1, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#字母表逆序对列表排序</span><br>list4 = <span class="hljs-built_in">sorted</span>(list1, key=<span class="hljs-built_in">len</span>)<br><span class="hljs-comment">#通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;sort函数会直接在列表对象上进行排序&#x27;&#x27;&#x27;</span><br>list1.sort(reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="集合相关方法"><a href="#集合相关方法" class="headerlink" title="集合相关方法"></a>集合相关方法</h2><h3 id="1-向集合中添加元素"><a href="#1-向集合中添加元素" class="headerlink" title="1.向集合中添加元素"></a>1.向集合中添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br>set1.add(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(set1)<br><span class="hljs-comment">#&#123;1,2,3,4&#125;</span><br>set1.update([<span class="hljs-number">12</span>,<span class="hljs-number">13</span>])<br><span class="hljs-comment">#&#123;1,2,3,4,12,13&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-从集合中删除元素"><a href="#2-从集合中删除元素" class="headerlink" title="2.从集合中删除元素"></a>2.从集合中删除元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">set1.remove(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#&#123;1,2,3,12,13&#125;</span><br><span class="hljs-comment">#删除指定位置上的元素</span><br>set1.pop()<br><span class="hljs-comment">#&#123;2,3,4,12,13&#125;</span><br><span class="hljs-comment">#删除第一个元素</span><br></code></pre></td></tr></table></figure><h2 id="字典相关方法"><a href="#字典相关方法" class="headerlink" title="字典相关方法"></a>字典相关方法</h2><h3 id="1-删除字典中的元素"><a href="#1-删除字典中的元素" class="headerlink" title="1.删除字典中的元素"></a>1.删除字典中的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;骆昊&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;狄仁杰&#x27;</span>: <span class="hljs-number">82</span>&#125;<br><span class="hljs-built_in">print</span>(scores.pop(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">100</span>))<span class="hljs-comment">#95</span><br><span class="hljs-comment">#删除对应的键值对</span><br><span class="hljs-built_in">print</span>(scores.popitem())<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-comment">#(&#x27;狄仁杰&#x27;, 82)</span><br><span class="hljs-comment">#&#123;&#x27;骆昊&#x27;: 95, &#x27;白元芳&#x27;: 78&#125;</span><br><span class="hljs-comment">#删除最后一对键值对</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
